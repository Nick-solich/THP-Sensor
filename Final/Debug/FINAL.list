
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000335c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003554  08003554  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800355c  0800355c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  080035d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080035d4  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095a7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176e  00000000  00000000  00029647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0002adb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d3e  00000000  00000000  0002bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089a5  00000000  00000000  0004080e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083dc5  00000000  00000000  000491b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccf78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e78  00000000  00000000  000ccfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080034e4 	.word	0x080034e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080034e4 	.word	0x080034e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <HAL_UART_RxCpltCallback+0x78>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d12f      	bne.n	80005e8 <HAL_UART_RxCpltCallback+0x70>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000588:	2120      	movs	r1, #32
 800058a:	481a      	ldr	r0, [pc, #104]	; (80005f4 <HAL_UART_RxCpltCallback+0x7c>)
 800058c:	f000 fef3 	bl	8001376 <HAL_GPIO_TogglePin>
		sprintf(buffer1,"pm2.5 %d\r\n",buffer[0]);
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_UART_RxCpltCallback+0x80>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4919      	ldr	r1, [pc, #100]	; (80005fc <HAL_UART_RxCpltCallback+0x84>)
 8000598:	4819      	ldr	r0, [pc, #100]	; (8000600 <HAL_UART_RxCpltCallback+0x88>)
 800059a:	f002 fb75 	bl	8002c88 <siprintf>
		HAL_UART_Transmit(&huart2, &buffer1, sizeof(buffer1), HAL_MAX_DELAY);
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	220a      	movs	r2, #10
 80005a4:	4916      	ldr	r1, [pc, #88]	; (8000600 <HAL_UART_RxCpltCallback+0x88>)
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <HAL_UART_RxCpltCallback+0x8c>)
 80005a8:	f001 fbc1 	bl	8001d2e <HAL_UART_Transmit>
		if(buffer[0] >= 0 && buffer[0] < 50) state = 1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_UART_RxCpltCallback+0x80>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b31      	cmp	r3, #49	; 0x31
 80005b2:	d802      	bhi.n	80005ba <HAL_UART_RxCpltCallback+0x42>
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <HAL_UART_RxCpltCallback+0x90>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
		if(buffer[0] >= 50 && buffer[0] < 150) state = 2;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_UART_RxCpltCallback+0x80>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b31      	cmp	r3, #49	; 0x31
 80005c0:	d906      	bls.n	80005d0 <HAL_UART_RxCpltCallback+0x58>
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <HAL_UART_RxCpltCallback+0x80>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b95      	cmp	r3, #149	; 0x95
 80005c8:	d802      	bhi.n	80005d0 <HAL_UART_RxCpltCallback+0x58>
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <HAL_UART_RxCpltCallback+0x90>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	701a      	strb	r2, [r3, #0]
		if(buffer[0] > 150) state = 3;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_UART_RxCpltCallback+0x80>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b96      	cmp	r3, #150	; 0x96
 80005d6:	d902      	bls.n	80005de <HAL_UART_RxCpltCallback+0x66>
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_UART_RxCpltCallback+0x90>)
 80005da:	2203      	movs	r2, #3
 80005dc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &buffer, sizeof(buffer));
 80005de:	2201      	movs	r2, #1
 80005e0:	4905      	ldr	r1, [pc, #20]	; (80005f8 <HAL_UART_RxCpltCallback+0x80>)
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <HAL_UART_RxCpltCallback+0x78>)
 80005e4:	f001 fc35 	bl	8001e52 <HAL_UART_Receive_IT>
	}
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	40020000 	.word	0x40020000
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	080034fc 	.word	0x080034fc
 8000600:	20000128 	.word	0x20000128
 8000604:	200000e4 	.word	0x200000e4
 8000608:	20000098 	.word	0x20000098

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fafe 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f864 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f91e 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061c:	f000 f8f2 	bl	8000804 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f8c6 	bl	80007b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &buffer, sizeof(buffer));
 8000624:	2201      	movs	r2, #1
 8000626:	4929      	ldr	r1, [pc, #164]	; (80006cc <main+0xc0>)
 8000628:	4829      	ldr	r0, [pc, #164]	; (80006d0 <main+0xc4>)
 800062a:	f001 fc12 	bl	8001e52 <HAL_UART_Receive_IT>
  state = 4;
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <main+0xc8>)
 8000630:	2204      	movs	r2, #4
 8000632:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (state) {
 8000634:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <main+0xc8>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b03      	cmp	r3, #3
 800063a:	d026      	beq.n	800068a <main+0x7e>
 800063c:	2b03      	cmp	r3, #3
 800063e:	dc34      	bgt.n	80006aa <main+0x9e>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d002      	beq.n	800064a <main+0x3e>
 8000644:	2b02      	cmp	r3, #2
 8000646:	d010      	beq.n	800066a <main+0x5e>
 8000648:	e02f      	b.n	80006aa <main+0x9e>
	  	    case 1:
	  		      HAL_GPIO_WritePin(LD_Green_GPIO_Port, LD_Green_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	4822      	ldr	r0, [pc, #136]	; (80006d8 <main+0xcc>)
 8000650:	f000 fe78 	bl	8001344 <HAL_GPIO_WritePin>
	  		      HAL_GPIO_WritePin(LD_Yellow_GPIO_Port, LD_Yellow_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	481f      	ldr	r0, [pc, #124]	; (80006d8 <main+0xcc>)
 800065a:	f000 fe73 	bl	8001344 <HAL_GPIO_WritePin>
	  		      HAL_GPIO_WritePin(LD_Red_GPIO_Port, LD_Red_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	481e      	ldr	r0, [pc, #120]	; (80006dc <main+0xd0>)
 8000664:	f000 fe6e 	bl	8001344 <HAL_GPIO_WritePin>
	  	      break;
 8000668:	e02e      	b.n	80006c8 <main+0xbc>
	  	    case 2:
	  		      HAL_GPIO_WritePin(LD_Green_GPIO_Port, LD_Green_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <main+0xcc>)
 8000670:	f000 fe68 	bl	8001344 <HAL_GPIO_WritePin>
	  		      HAL_GPIO_WritePin(LD_Yellow_GPIO_Port, LD_Yellow_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4817      	ldr	r0, [pc, #92]	; (80006d8 <main+0xcc>)
 800067a:	f000 fe63 	bl	8001344 <HAL_GPIO_WritePin>
	  		      HAL_GPIO_WritePin(LD_Red_GPIO_Port, LD_Red_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	4816      	ldr	r0, [pc, #88]	; (80006dc <main+0xd0>)
 8000684:	f000 fe5e 	bl	8001344 <HAL_GPIO_WritePin>
	  	      break;
 8000688:	e01e      	b.n	80006c8 <main+0xbc>
	  	    case 3:
	  		      HAL_GPIO_WritePin(LD_Green_GPIO_Port, LD_Green_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <main+0xcc>)
 8000690:	f000 fe58 	bl	8001344 <HAL_GPIO_WritePin>
	  		      HAL_GPIO_WritePin(LD_Yellow_GPIO_Port, LD_Yellow_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <main+0xcc>)
 800069a:	f000 fe53 	bl	8001344 <HAL_GPIO_WritePin>
	  		      HAL_GPIO_WritePin(LD_Red_GPIO_Port, LD_Red_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <main+0xd0>)
 80006a4:	f000 fe4e 	bl	8001344 <HAL_GPIO_WritePin>
	  	      break;
 80006a8:	e00e      	b.n	80006c8 <main+0xbc>
	  	    default:
	  		      HAL_GPIO_WritePin(LD_Green_GPIO_Port, LD_Green_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2140      	movs	r1, #64	; 0x40
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <main+0xcc>)
 80006b0:	f000 fe48 	bl	8001344 <HAL_GPIO_WritePin>
	  		      HAL_GPIO_WritePin(LD_Yellow_GPIO_Port, LD_Yellow_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <main+0xcc>)
 80006ba:	f000 fe43 	bl	8001344 <HAL_GPIO_WritePin>
	  		      HAL_GPIO_WritePin(LD_Red_GPIO_Port, LD_Red_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <main+0xd0>)
 80006c4:	f000 fe3e 	bl	8001344 <HAL_GPIO_WritePin>
	  switch (state) {
 80006c8:	e7b4      	b.n	8000634 <main+0x28>
 80006ca:	bf00      	nop
 80006cc:	200000e0 	.word	0x200000e0
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	20000098 	.word	0x20000098
 80006d8:	40020000 	.word	0x40020000
 80006dc:	40020400 	.word	0x40020400

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fac2 	bl	8002c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <SystemClock_Config+0xc8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <SystemClock_Config+0xc8>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <SystemClock_Config+0xc8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <SystemClock_Config+0xcc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a20      	ldr	r2, [pc, #128]	; (80007ac <SystemClock_Config+0xcc>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <SystemClock_Config+0xcc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000754:	2350      	movs	r3, #80	; 0x50
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fe21 	bl	80013ac <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000770:	f000 f8f6 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2102      	movs	r1, #2
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f883 	bl	800189c <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800079c:	f000 f8e0 	bl	8000960 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f001 fa54 	bl	8001c94 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f8b5 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000009c 	.word	0x2000009c
 8000800:	40011000 	.word	0x40011000

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f001 fa2a 	bl	8001c94 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f88b 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e4 	.word	0x200000e4
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <MX_GPIO_Init+0xf8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a36      	ldr	r2, [pc, #216]	; (8000950 <MX_GPIO_Init+0xf8>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_GPIO_Init+0xf8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <MX_GPIO_Init+0xf8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <MX_GPIO_Init+0xf8>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_GPIO_Init+0xf8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_GPIO_Init+0xf8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a28      	ldr	r2, [pc, #160]	; (8000950 <MX_GPIO_Init+0xf8>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_GPIO_Init+0xf8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0xf8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_GPIO_Init+0xf8>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xf8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD_Green_Pin|LD_Yellow_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	21e0      	movs	r1, #224	; 0xe0
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008e4:	f000 fd2e 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_Red_GPIO_Port, LD_Red_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_GPIO_Init+0x100>)
 80008ee:	f000 fd29 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4814      	ldr	r0, [pc, #80]	; (800095c <MX_GPIO_Init+0x104>)
 800090a:	f000 fb97 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD_Green_Pin LD_Yellow_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD_Green_Pin|LD_Yellow_Pin;
 800090e:	23e0      	movs	r3, #224	; 0xe0
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000926:	f000 fb89 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_Red_Pin */
  GPIO_InitStruct.Pin = LD_Red_Pin;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD_Red_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0x100>)
 8000942:	f000 fb7b 	bl	800103c <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000
 8000958:	40020400 	.word	0x40020400
 800095c:	40020800 	.word	0x40020800

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80009aa:	2006      	movs	r0, #6
 80009ac:	f000 fa72 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a36      	ldr	r2, [pc, #216]	; (8000ab4 <HAL_UART_MspInit+0xf8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d135      	bne.n	8000a4a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a2d      	ldr	r2, [pc, #180]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4822      	ldr	r0, [pc, #136]	; (8000abc <HAL_UART_MspInit+0x100>)
 8000a34:	f000 fb02 	bl	800103c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	2025      	movs	r0, #37	; 0x25
 8000a3e:	f000 fa34 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a42:	2025      	movs	r0, #37	; 0x25
 8000a44:	f000 fa4d 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a48:	e030      	b.n	8000aac <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0x104>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d12b      	bne.n	8000aac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_UART_MspInit+0xfc>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_UART_MspInit+0x100>)
 8000aa8:	f000 fac8 	bl	800103c <HAL_GPIO_Init>
}
 8000aac:	bf00      	nop
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f8d0 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <USART1_IRQHandler+0x10>)
 8000b1e:	f001 f9c9 	bl	8001eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000009c 	.word	0x2000009c

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f002 f862 	bl	8002c24 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20020000 	.word	0x20020000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	2000008c 	.word	0x2000008c
 8000b94:	20000148 	.word	0x20000148

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 f821 	bl	8002c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd0d 	bl	800060c <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c00:	08003564 	.word	0x08003564
  ldr r2, =_sbss
 8000c04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c08:	20000148 	.word	0x20000148

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f92b 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe92 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f943 	bl	8000efe <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f90b 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000134 	.word	0x20000134

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000134 	.word	0x20000134

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff29 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff3e 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff8e 	bl	8000de8 <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff31 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa2 	bl	8000e50 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff feda 	bl	8000cdc <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d008      	beq.n	8000f48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e052      	b.n	8000fee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0216 	bic.w	r2, r2, #22
 8000f56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d103      	bne.n	8000f78 <HAL_DMA_Abort+0x62>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0208 	bic.w	r2, r2, #8
 8000f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f98:	e013      	b.n	8000fc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f9a:	f7ff fe9f 	bl	8000cdc <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d90c      	bls.n	8000fc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2220      	movs	r2, #32
 8000fac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e015      	b.n	8000fee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e4      	bne.n	8000f9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd4:	223f      	movs	r2, #63	; 0x3f
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d004      	beq.n	8001014 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e00c      	b.n	800102e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2205      	movs	r2, #5
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e159      	b.n	800130c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8148 	bne.w	8001306 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a2 	beq.w	8001306 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b57      	ldr	r3, [pc, #348]	; (8001324 <HAL_GPIO_Init+0x2e8>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a56      	ldr	r2, [pc, #344]	; (8001324 <HAL_GPIO_Init+0x2e8>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b54      	ldr	r3, [pc, #336]	; (8001324 <HAL_GPIO_Init+0x2e8>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a52      	ldr	r2, [pc, #328]	; (8001328 <HAL_GPIO_Init+0x2ec>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a49      	ldr	r2, [pc, #292]	; (800132c <HAL_GPIO_Init+0x2f0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x202>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a48      	ldr	r2, [pc, #288]	; (8001330 <HAL_GPIO_Init+0x2f4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x1fe>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a47      	ldr	r2, [pc, #284]	; (8001334 <HAL_GPIO_Init+0x2f8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x1fa>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a46      	ldr	r2, [pc, #280]	; (8001338 <HAL_GPIO_Init+0x2fc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x1f6>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a45      	ldr	r2, [pc, #276]	; (800133c <HAL_GPIO_Init+0x300>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x1f2>
 800122a:	2304      	movs	r3, #4
 800122c:	e008      	b.n	8001240 <HAL_GPIO_Init+0x204>
 800122e:	2307      	movs	r3, #7
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x204>
 8001232:	2303      	movs	r3, #3
 8001234:	e004      	b.n	8001240 <HAL_GPIO_Init+0x204>
 8001236:	2302      	movs	r3, #2
 8001238:	e002      	b.n	8001240 <HAL_GPIO_Init+0x204>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x204>
 800123e:	2300      	movs	r3, #0
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	f002 0203 	and.w	r2, r2, #3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4093      	lsls	r3, r2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001250:	4935      	ldr	r1, [pc, #212]	; (8001328 <HAL_GPIO_Init+0x2ec>)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125e:	4b38      	ldr	r3, [pc, #224]	; (8001340 <HAL_GPIO_Init+0x304>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001282:	4a2f      	ldr	r2, [pc, #188]	; (8001340 <HAL_GPIO_Init+0x304>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001288:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_GPIO_Init+0x304>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ac:	4a24      	ldr	r2, [pc, #144]	; (8001340 <HAL_GPIO_Init+0x304>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_GPIO_Init+0x304>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <HAL_GPIO_Init+0x304>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_GPIO_Init+0x304>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_GPIO_Init+0x304>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	f67f aea2 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40013800 	.word	0x40013800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	041a      	lsls	r2, r3, #16
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43d9      	mvns	r1, r3
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	400b      	ands	r3, r1
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e264      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d075      	beq.n	80014b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ca:	4ba3      	ldr	r3, [pc, #652]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d00c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4ba0      	ldr	r3, [pc, #640]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d112      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	4b9d      	ldr	r3, [pc, #628]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ee:	d10b      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	4b99      	ldr	r3, [pc, #612]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d05b      	beq.n	80014b4 <HAL_RCC_OscConfig+0x108>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d157      	bne.n	80014b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e23f      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x74>
 8001412:	4b91      	ldr	r3, [pc, #580]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a90      	ldr	r2, [pc, #576]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e01d      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b8b      	ldr	r3, [pc, #556]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a8a      	ldr	r2, [pc, #552]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a87      	ldr	r2, [pc, #540]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001444:	4b84      	ldr	r3, [pc, #528]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a83      	ldr	r2, [pc, #524]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b81      	ldr	r3, [pc, #516]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a80      	ldr	r2, [pc, #512]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fc3a 	bl	8000cdc <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fc36 	bl	8000cdc <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e204      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0xc0>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fc26 	bl	8000cdc <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fc22 	bl	8000cdc <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1f0      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0xe8>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ce:	4b62      	ldr	r3, [pc, #392]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1c4      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4952      	ldr	r1, [pc, #328]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e03a      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b4f      	ldr	r3, [pc, #316]	; (800165c <HAL_RCC_OscConfig+0x2b0>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fbdb 	bl	8000cdc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fbd7 	bl	8000cdc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1a5      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4b46      	ldr	r3, [pc, #280]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4940      	ldr	r1, [pc, #256]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_RCC_OscConfig+0x2b0>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbba 	bl	8000cdc <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fbb6 	bl	8000cdc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e184      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d030      	beq.n	80015f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d016      	beq.n	80015cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x2b4>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fb9a 	bl	8000cdc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fb96 	bl	8000cdc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e164      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x200>
 80015ca:	e015      	b.n	80015f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x2b4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb83 	bl	8000cdc <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fb7f 	bl	8000cdc <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e14d      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80015ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80a0 	beq.w	8001746 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x2b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d121      	bne.n	8001686 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_RCC_OscConfig+0x2b8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_RCC_OscConfig+0x2b8>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7ff fb45 	bl	8000cdc <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	e011      	b.n	800167a <HAL_RCC_OscConfig+0x2ce>
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	42470000 	.word	0x42470000
 8001660:	42470e80 	.word	0x42470e80
 8001664:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001668:	f7ff fb38 	bl	8000cdc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e106      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167a:	4b85      	ldr	r3, [pc, #532]	; (8001890 <HAL_RCC_OscConfig+0x4e4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x2f0>
 800168e:	4b81      	ldr	r3, [pc, #516]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a80      	ldr	r2, [pc, #512]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	e01c      	b.n	80016d6 <HAL_RCC_OscConfig+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0x312>
 80016a4:	4b7b      	ldr	r3, [pc, #492]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a7a      	ldr	r2, [pc, #488]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	4b78      	ldr	r3, [pc, #480]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a77      	ldr	r2, [pc, #476]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0x32a>
 80016be:	4b75      	ldr	r3, [pc, #468]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	4a74      	ldr	r2, [pc, #464]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ca:	4b72      	ldr	r3, [pc, #456]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	4a71      	ldr	r2, [pc, #452]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	f023 0304 	bic.w	r3, r3, #4
 80016d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d015      	beq.n	800170a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fafd 	bl	8000cdc <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff faf9 	bl	8000cdc <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0c5      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	4b65      	ldr	r3, [pc, #404]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ee      	beq.n	80016e6 <HAL_RCC_OscConfig+0x33a>
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170a:	f7ff fae7 	bl	8000cdc <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fae3 	bl	8000cdc <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e0af      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ee      	bne.n	8001712 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173a:	4b56      	ldr	r3, [pc, #344]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a55      	ldr	r2, [pc, #340]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 809b 	beq.w	8001886 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d05c      	beq.n	8001816 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d141      	bne.n	80017e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x4ec>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fab7 	bl	8000cdc <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fab3 	bl	8000cdc <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e081      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001784:	4b43      	ldr	r3, [pc, #268]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	019b      	lsls	r3, r3, #6
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	3b01      	subs	r3, #1
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	061b      	lsls	r3, r3, #24
 80017b4:	4937      	ldr	r1, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_RCC_OscConfig+0x4ec>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fa8c 	bl	8000cdc <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fa88 	bl	8000cdc <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e056      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x41c>
 80017e6:	e04e      	b.n	8001886 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_RCC_OscConfig+0x4ec>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fa75 	bl	8000cdc <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff fa71 	bl	8000cdc <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e03f      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x44a>
 8001814:	e037      	b.n	8001886 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e032      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d028      	beq.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d121      	bne.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d11a      	bne.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001852:	4013      	ands	r3, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001858:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185a:	4293      	cmp	r3, r2
 800185c:	d111      	bne.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40007000 	.word	0x40007000
 8001894:	40023800 	.word	0x40023800
 8001898:	42470060 	.word	0x42470060

0800189c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0cc      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b68      	ldr	r3, [pc, #416]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d90c      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b8      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a58      	ldr	r2, [pc, #352]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	494d      	ldr	r1, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d044      	beq.n	80019bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d119      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e07f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d003      	beq.n	800195a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	2b03      	cmp	r3, #3
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e067      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4934      	ldr	r1, [pc, #208]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800198c:	f7ff f9a6 	bl	8000cdc <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f9a2 	bl	8000cdc <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e04f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d20c      	bcs.n	80019e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e032      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4916      	ldr	r1, [pc, #88]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a22:	f000 f821 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	5ccb      	ldrb	r3, [r1, r3]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f906 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08003508 	.word	0x08003508
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a80:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	f200 80bd 	bhi.w	8001c0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x34>
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9a:	e0b7      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a9e:	60bb      	str	r3, [r7, #8]
       break;
 8001aa0:	e0b7      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa2:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001aa4:	60bb      	str	r3, [r7, #8]
      break;
 8001aa6:	e0b4      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa8:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab2:	4b5b      	ldr	r3, [pc, #364]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d04d      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abe:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	ea02 0800 	and.w	r8, r2, r0
 8001ad6:	ea03 0901 	and.w	r9, r3, r1
 8001ada:	4640      	mov	r0, r8
 8001adc:	4649      	mov	r1, r9
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	014b      	lsls	r3, r1, #5
 8001ae8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aec:	0142      	lsls	r2, r0, #5
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	ebb0 0008 	subs.w	r0, r0, r8
 8001af6:	eb61 0109 	sbc.w	r1, r1, r9
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	018b      	lsls	r3, r1, #6
 8001b04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b08:	0182      	lsls	r2, r0, #6
 8001b0a:	1a12      	subs	r2, r2, r0
 8001b0c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	00d9      	lsls	r1, r3, #3
 8001b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b1e:	00d0      	lsls	r0, r2, #3
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	eb12 0208 	adds.w	r2, r2, r8
 8001b28:	eb43 0309 	adc.w	r3, r3, r9
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0259      	lsls	r1, r3, #9
 8001b36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b3a:	0250      	lsls	r0, r2, #9
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	f7fe fb98 	bl	8000280 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4613      	mov	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e04a      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	461a      	mov	r2, r3
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	ea02 0400 	and.w	r4, r2, r0
 8001b72:	ea03 0501 	and.w	r5, r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	014b      	lsls	r3, r1, #5
 8001b84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b88:	0142      	lsls	r2, r0, #5
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	1b00      	subs	r0, r0, r4
 8001b90:	eb61 0105 	sbc.w	r1, r1, r5
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	018b      	lsls	r3, r1, #6
 8001b9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ba2:	0182      	lsls	r2, r0, #6
 8001ba4:	1a12      	subs	r2, r2, r0
 8001ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8001baa:	f04f 0000 	mov.w	r0, #0
 8001bae:	f04f 0100 	mov.w	r1, #0
 8001bb2:	00d9      	lsls	r1, r3, #3
 8001bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bb8:	00d0      	lsls	r0, r2, #3
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	1912      	adds	r2, r2, r4
 8001bc0:	eb45 0303 	adc.w	r3, r5, r3
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	0299      	lsls	r1, r3, #10
 8001bce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bd2:	0290      	lsls	r0, r2, #10
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	f7fe fb4c 	bl	8000280 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	60bb      	str	r3, [r7, #8]
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c0e:	60bb      	str	r3, [r7, #8]
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	68bb      	ldr	r3, [r7, #8]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	007a1200 	.word	0x007a1200

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a9b      	lsrs	r3, r3, #10
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08003518 	.word	0x08003518

08001c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c70:	f7ff ffdc 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08003518 	.word	0x08003518

08001c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e03f      	b.n	8001d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fe7e 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fddb 	bl	8002894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b08a      	sub	sp, #40	; 0x28
 8001d32:	af02      	add	r7, sp, #8
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d17c      	bne.n	8001e48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_UART_Transmit+0x2c>
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e075      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_UART_Transmit+0x3e>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e06e      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2221      	movs	r2, #33	; 0x21
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d82:	f7fe ffab 	bl	8000cdc <HAL_GetTick>
 8001d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	88fa      	ldrh	r2, [r7, #6]
 8001d8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	88fa      	ldrh	r2, [r7, #6]
 8001d92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9c:	d108      	bne.n	8001db0 <HAL_UART_Transmit+0x82>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	e003      	b.n	8001db8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001dc0:	e02a      	b.n	8001e18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fb1f 	bl	8002410 <UART_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e036      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10b      	bne.n	8001dfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	3302      	adds	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e007      	b.n	8001e0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	3301      	adds	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1cf      	bne.n	8001dc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2140      	movs	r1, #64	; 0x40
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 faef 	bl	8002410 <UART_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e006      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d11d      	bne.n	8001ea8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_UART_Receive_IT+0x26>
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e016      	b.n	8001eaa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_UART_Receive_IT+0x38>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e00f      	b.n	8001eaa <HAL_UART_Receive_IT+0x58>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 fb24 	bl	80024ec <UART_Start_Receive_IT>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	e000      	b.n	8001eaa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ea8:	2302      	movs	r3, #2
  }
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0ba      	sub	sp, #232	; 0xe8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_UART_IRQHandler+0x66>
 8001f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fc03 	bl	800271e <UART_Receive_IT>
      return;
 8001f18:	e256      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80de 	beq.w	80020e0 <HAL_UART_IRQHandler+0x22c>
 8001f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80d1 	beq.w	80020e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_UART_IRQHandler+0xae>
 8001f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_UART_IRQHandler+0xd2>
 8001f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_UART_IRQHandler+0xf6>
 8001f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f043 0204 	orr.w	r2, r3, #4
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d011      	beq.n	8001fda <HAL_UART_IRQHandler+0x126>
 8001fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0208 	orr.w	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 81ed 	beq.w	80023be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_UART_IRQHandler+0x14e>
 8001ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fb8e 	bl	800271e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <HAL_UART_IRQHandler+0x17a>
 8002026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d04f      	beq.n	80020ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa96 	bl	8002560 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d141      	bne.n	80020c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3314      	adds	r3, #20
 8002048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800205c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3314      	adds	r3, #20
 800206a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800206e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800207a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800207e:	e841 2300 	strex	r3, r2, [r1]
 8002082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1d9      	bne.n	8002042 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	4a7d      	ldr	r2, [pc, #500]	; (8002290 <HAL_UART_IRQHandler+0x3dc>)
 800209c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ffa7 	bl	8000ff6 <HAL_DMA_Abort_IT>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b8:	4610      	mov	r0, r2
 80020ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020bc:	e00e      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f990 	bl	80023e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c4:	e00a      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f98c 	bl	80023e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020cc:	e006      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f988 	bl	80023e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80020da:	e170      	b.n	80023be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020dc:	bf00      	nop
    return;
 80020de:	e16e      	b.n	80023be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 814a 	bne.w	800237e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8143 	beq.w	800237e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 813c 	beq.w	800237e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	f040 80b4 	bne.w	8002294 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8140 	beq.w	80023c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800214a:	429a      	cmp	r2, r3
 800214c:	f080 8139 	bcs.w	80023c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002156:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002162:	f000 8088 	beq.w	8002276 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002174:	e853 3f00 	ldrex	r3, [r3]
 8002178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800217c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	330c      	adds	r3, #12
 800218e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800219e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021a2:	e841 2300 	strex	r3, r2, [r1]
 80021a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80021aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1d9      	bne.n	8002166 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021bc:	e853 3f00 	ldrex	r3, [r3]
 80021c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3314      	adds	r3, #20
 80021d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80021da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021e2:	e841 2300 	strex	r3, r2, [r1]
 80021e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80021e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e1      	bne.n	80021b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3314      	adds	r3, #20
 80021f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f8:	e853 3f00 	ldrex	r3, [r3]
 80021fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80021fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3314      	adds	r3, #20
 800220e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800221a:	e841 2300 	strex	r3, r2, [r1]
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e3      	bne.n	80021ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	330c      	adds	r3, #12
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223e:	e853 3f00 	ldrex	r3, [r3]
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002246:	f023 0310 	bic.w	r3, r3, #16
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	330c      	adds	r3, #12
 8002254:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002258:	65ba      	str	r2, [r7, #88]	; 0x58
 800225a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800225e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002260:	e841 2300 	strex	r3, r2, [r1]
 8002264:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e3      	bne.n	8002234 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe50 	bl	8000f16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800227e:	b29b      	uxth	r3, r3
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8b6 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800228c:	e099      	b.n	80023c2 <HAL_UART_IRQHandler+0x50e>
 800228e:	bf00      	nop
 8002290:	08002627 	.word	0x08002627
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229c:	b29b      	uxth	r3, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 808b 	beq.w	80023c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80022b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8086 	beq.w	80023c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c4:	e853 3f00 	ldrex	r3, [r3]
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80022ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80022de:	647a      	str	r2, [r7, #68]	; 0x44
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022e6:	e841 2300 	strex	r3, r2, [r1]
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80022ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1e3      	bne.n	80022ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3314      	adds	r3, #20
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	623b      	str	r3, [r7, #32]
   return(result);
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3314      	adds	r3, #20
 8002312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002316:	633a      	str	r2, [r7, #48]	; 0x30
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e3      	bne.n	80022f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	e853 3f00 	ldrex	r3, [r3]
 8002346:	60fb      	str	r3, [r7, #12]
   return(result);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0310 	bic.w	r3, r3, #16
 800234e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	330c      	adds	r3, #12
 8002358:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800235c:	61fa      	str	r2, [r7, #28]
 800235e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	617b      	str	r3, [r7, #20]
   return(result);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e3      	bne.n	8002338 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f83e 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800237c:	e023      	b.n	80023c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_UART_IRQHandler+0x4ea>
 800238a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f959 	bl	800264e <UART_Transmit_IT>
    return;
 800239c:	e014      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800239e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00e      	beq.n	80023c8 <HAL_UART_IRQHandler+0x514>
 80023aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f999 	bl	80026ee <UART_EndTransmit_IT>
    return;
 80023bc:	e004      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
    return;
 80023be:	bf00      	nop
 80023c0:	e002      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
      return;
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
      return;
 80023c6:	bf00      	nop
  }
}
 80023c8:	37e8      	adds	r7, #232	; 0xe8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop

080023d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b090      	sub	sp, #64	; 0x40
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002420:	e050      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d04c      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800242a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <UART_WaitOnFlagUntilTimeout+0x30>
 8002430:	f7fe fc54 	bl	8000cdc <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800243c:	429a      	cmp	r2, r3
 800243e:	d241      	bcs.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	330c      	adds	r3, #12
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	e853 3f00 	ldrex	r3, [r3]
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	330c      	adds	r3, #12
 800245e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002460:	637a      	str	r2, [r7, #52]	; 0x34
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002468:	e841 2300 	strex	r3, r2, [r1]
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3314      	adds	r3, #20
 800247a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	e853 3f00 	ldrex	r3, [r3]
 8002482:	613b      	str	r3, [r7, #16]
   return(result);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	63bb      	str	r3, [r7, #56]	; 0x38
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3314      	adds	r3, #20
 8002492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002494:	623a      	str	r2, [r7, #32]
 8002496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	69f9      	ldr	r1, [r7, #28]
 800249a:	6a3a      	ldr	r2, [r7, #32]
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e5      	bne.n	8002474 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e00f      	b.n	80024e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4013      	ands	r3, r2
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d09f      	beq.n	8002422 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3740      	adds	r7, #64	; 0x40
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	88fa      	ldrh	r2, [r7, #6]
 800250a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2222      	movs	r2, #34	; 0x22
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002530:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0220 	orr.w	r2, r2, #32
 8002550:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002560:	b480      	push	{r7}
 8002562:	b095      	sub	sp, #84	; 0x54
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	330c      	adds	r3, #12
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	e853 3f00 	ldrex	r3, [r3]
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002588:	643a      	str	r2, [r7, #64]	; 0x40
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800258e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002590:	e841 2300 	strex	r3, r2, [r1]
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e5      	bne.n	8002568 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3314      	adds	r3, #20
 80025ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e5      	bne.n	800259c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d119      	bne.n	800260c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	e853 3f00 	ldrex	r3, [r3]
 80025e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f023 0310 	bic.w	r3, r3, #16
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025f8:	61ba      	str	r2, [r7, #24]
 80025fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fc:	6979      	ldr	r1, [r7, #20]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	e841 2300 	strex	r3, r2, [r1]
 8002604:	613b      	str	r3, [r7, #16]
   return(result);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e5      	bne.n	80025d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
}
 800261a:	bf00      	nop
 800261c:	3754      	adds	r7, #84	; 0x54
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fecf 	bl	80023e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b21      	cmp	r3, #33	; 0x21
 8002660:	d13e      	bne.n	80026e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	d114      	bne.n	8002696 <UART_Transmit_IT+0x48>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d110      	bne.n	8002696 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002688:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	1c9a      	adds	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	621a      	str	r2, [r3, #32]
 8002694:	e008      	b.n	80026a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6211      	str	r1, [r2, #32]
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4619      	mov	r1, r3
 80026b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10f      	bne.n	80026dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002704:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fe5e 	bl	80023d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b08c      	sub	sp, #48	; 0x30
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b22      	cmp	r3, #34	; 0x22
 8002730:	f040 80ab 	bne.w	800288a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273c:	d117      	bne.n	800276e <UART_Receive_IT+0x50>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d113      	bne.n	800276e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275c:	b29a      	uxth	r2, r3
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	1c9a      	adds	r2, r3, #2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
 800276c:	e026      	b.n	80027bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002774:	2300      	movs	r3, #0
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002780:	d007      	beq.n	8002792 <UART_Receive_IT+0x74>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <UART_Receive_IT+0x82>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	e008      	b.n	80027b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4619      	mov	r1, r3
 80027ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d15a      	bne.n	8002886 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0220 	bic.w	r2, r2, #32
 80027de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	2b01      	cmp	r3, #1
 800280e:	d135      	bne.n	800287c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	330c      	adds	r3, #12
 800281c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	613b      	str	r3, [r7, #16]
   return(result);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f023 0310 	bic.w	r3, r3, #16
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002836:	623a      	str	r2, [r7, #32]
 8002838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	69f9      	ldr	r1, [r7, #28]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	61bb      	str	r3, [r7, #24]
   return(result);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e5      	bne.n	8002816 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b10      	cmp	r3, #16
 8002856:	d10a      	bne.n	800286e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fdbf 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
 800287a:	e002      	b.n	8002882 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fd fe7b 	bl	8000578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e002      	b.n	800288c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3730      	adds	r7, #48	; 0x30
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002898:	b09f      	sub	sp, #124	; 0x7c
 800289a:	af00      	add	r7, sp, #0
 800289c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028aa:	68d9      	ldr	r1, [r3, #12]
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	ea40 0301 	orr.w	r3, r0, r1
 80028b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	431a      	orrs	r2, r3
 80028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80028ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028d8:	f021 010c 	bic.w	r1, r1, #12
 80028dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e2:	430b      	orrs	r3, r1
 80028e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f2:	6999      	ldr	r1, [r3, #24]
 80028f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	ea40 0301 	orr.w	r3, r0, r1
 80028fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4bc5      	ldr	r3, [pc, #788]	; (8002c18 <UART_SetConfig+0x384>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d004      	beq.n	8002912 <UART_SetConfig+0x7e>
 8002908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4bc3      	ldr	r3, [pc, #780]	; (8002c1c <UART_SetConfig+0x388>)
 800290e:	429a      	cmp	r2, r3
 8002910:	d103      	bne.n	800291a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002912:	f7ff f9ab 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 8002916:	6778      	str	r0, [r7, #116]	; 0x74
 8002918:	e002      	b.n	8002920 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800291a:	f7ff f993 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 800291e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002928:	f040 80b6 	bne.w	8002a98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800292c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800292e:	461c      	mov	r4, r3
 8002930:	f04f 0500 	mov.w	r5, #0
 8002934:	4622      	mov	r2, r4
 8002936:	462b      	mov	r3, r5
 8002938:	1891      	adds	r1, r2, r2
 800293a:	6439      	str	r1, [r7, #64]	; 0x40
 800293c:	415b      	adcs	r3, r3
 800293e:	647b      	str	r3, [r7, #68]	; 0x44
 8002940:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002944:	1912      	adds	r2, r2, r4
 8002946:	eb45 0303 	adc.w	r3, r5, r3
 800294a:	f04f 0000 	mov.w	r0, #0
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	00d9      	lsls	r1, r3, #3
 8002954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002958:	00d0      	lsls	r0, r2, #3
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	1911      	adds	r1, r2, r4
 8002960:	6639      	str	r1, [r7, #96]	; 0x60
 8002962:	416b      	adcs	r3, r5
 8002964:	667b      	str	r3, [r7, #100]	; 0x64
 8002966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	461a      	mov	r2, r3
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	1891      	adds	r1, r2, r2
 8002972:	63b9      	str	r1, [r7, #56]	; 0x38
 8002974:	415b      	adcs	r3, r3
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800297c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002980:	f7fd fc7e 	bl	8000280 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4ba5      	ldr	r3, [pc, #660]	; (8002c20 <UART_SetConfig+0x38c>)
 800298a:	fba3 2302 	umull	r2, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	011e      	lsls	r6, r3, #4
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	461c      	mov	r4, r3
 8002996:	f04f 0500 	mov.w	r5, #0
 800299a:	4622      	mov	r2, r4
 800299c:	462b      	mov	r3, r5
 800299e:	1891      	adds	r1, r2, r2
 80029a0:	6339      	str	r1, [r7, #48]	; 0x30
 80029a2:	415b      	adcs	r3, r3
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
 80029a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029aa:	1912      	adds	r2, r2, r4
 80029ac:	eb45 0303 	adc.w	r3, r5, r3
 80029b0:	f04f 0000 	mov.w	r0, #0
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	00d9      	lsls	r1, r3, #3
 80029ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029be:	00d0      	lsls	r0, r2, #3
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	1911      	adds	r1, r2, r4
 80029c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80029c8:	416b      	adcs	r3, r5
 80029ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	461a      	mov	r2, r3
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	1891      	adds	r1, r2, r2
 80029d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80029da:	415b      	adcs	r3, r3
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80029e6:	f7fd fc4b 	bl	8000280 <__aeabi_uldivmod>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4b8c      	ldr	r3, [pc, #560]	; (8002c20 <UART_SetConfig+0x38c>)
 80029f0:	fba3 1302 	umull	r1, r3, r3, r2
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	3332      	adds	r3, #50	; 0x32
 8002a02:	4a87      	ldr	r2, [pc, #540]	; (8002c20 <UART_SetConfig+0x38c>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a10:	441e      	add	r6, r3
 8002a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a14:	4618      	mov	r0, r3
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	1894      	adds	r4, r2, r2
 8002a20:	623c      	str	r4, [r7, #32]
 8002a22:	415b      	adcs	r3, r3
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a2a:	1812      	adds	r2, r2, r0
 8002a2c:	eb41 0303 	adc.w	r3, r1, r3
 8002a30:	f04f 0400 	mov.w	r4, #0
 8002a34:	f04f 0500 	mov.w	r5, #0
 8002a38:	00dd      	lsls	r5, r3, #3
 8002a3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a3e:	00d4      	lsls	r4, r2, #3
 8002a40:	4622      	mov	r2, r4
 8002a42:	462b      	mov	r3, r5
 8002a44:	1814      	adds	r4, r2, r0
 8002a46:	653c      	str	r4, [r7, #80]	; 0x50
 8002a48:	414b      	adcs	r3, r1
 8002a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	461a      	mov	r2, r3
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	1891      	adds	r1, r2, r2
 8002a58:	61b9      	str	r1, [r7, #24]
 8002a5a:	415b      	adcs	r3, r3
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a66:	f7fd fc0b 	bl	8000280 <__aeabi_uldivmod>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <UART_SetConfig+0x38c>)
 8002a70:	fba3 1302 	umull	r1, r3, r3, r2
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	2164      	movs	r1, #100	; 0x64
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	3332      	adds	r3, #50	; 0x32
 8002a82:	4a67      	ldr	r2, [pc, #412]	; (8002c20 <UART_SetConfig+0x38c>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	f003 0207 	and.w	r2, r3, #7
 8002a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4432      	add	r2, r6
 8002a94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a96:	e0b9      	b.n	8002c0c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9a:	461c      	mov	r4, r3
 8002a9c:	f04f 0500 	mov.w	r5, #0
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	462b      	mov	r3, r5
 8002aa4:	1891      	adds	r1, r2, r2
 8002aa6:	6139      	str	r1, [r7, #16]
 8002aa8:	415b      	adcs	r3, r3
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ab0:	1912      	adds	r2, r2, r4
 8002ab2:	eb45 0303 	adc.w	r3, r5, r3
 8002ab6:	f04f 0000 	mov.w	r0, #0
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	00d9      	lsls	r1, r3, #3
 8002ac0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac4:	00d0      	lsls	r0, r2, #3
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	eb12 0804 	adds.w	r8, r2, r4
 8002ace:	eb43 0905 	adc.w	r9, r3, r5
 8002ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	008b      	lsls	r3, r1, #2
 8002ae6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002aea:	0082      	lsls	r2, r0, #2
 8002aec:	4640      	mov	r0, r8
 8002aee:	4649      	mov	r1, r9
 8002af0:	f7fd fbc6 	bl	8000280 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <UART_SetConfig+0x38c>)
 8002afa:	fba3 2302 	umull	r2, r3, r3, r2
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	011e      	lsls	r6, r3, #4
 8002b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b04:	4618      	mov	r0, r3
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	1894      	adds	r4, r2, r2
 8002b10:	60bc      	str	r4, [r7, #8]
 8002b12:	415b      	adcs	r3, r3
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b1a:	1812      	adds	r2, r2, r0
 8002b1c:	eb41 0303 	adc.w	r3, r1, r3
 8002b20:	f04f 0400 	mov.w	r4, #0
 8002b24:	f04f 0500 	mov.w	r5, #0
 8002b28:	00dd      	lsls	r5, r3, #3
 8002b2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b2e:	00d4      	lsls	r4, r2, #3
 8002b30:	4622      	mov	r2, r4
 8002b32:	462b      	mov	r3, r5
 8002b34:	1814      	adds	r4, r2, r0
 8002b36:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b38:	414b      	adcs	r3, r1
 8002b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	008b      	lsls	r3, r1, #2
 8002b50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b54:	0082      	lsls	r2, r0, #2
 8002b56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b5a:	f7fd fb91 	bl	8000280 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <UART_SetConfig+0x38c>)
 8002b64:	fba3 1302 	umull	r1, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	2164      	movs	r1, #100	; 0x64
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	3332      	adds	r3, #50	; 0x32
 8002b76:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <UART_SetConfig+0x38c>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b82:	441e      	add	r6, r3
 8002b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b86:	4618      	mov	r0, r3
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	1894      	adds	r4, r2, r2
 8002b92:	603c      	str	r4, [r7, #0]
 8002b94:	415b      	adcs	r3, r3
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b9c:	1812      	adds	r2, r2, r0
 8002b9e:	eb41 0303 	adc.w	r3, r1, r3
 8002ba2:	f04f 0400 	mov.w	r4, #0
 8002ba6:	f04f 0500 	mov.w	r5, #0
 8002baa:	00dd      	lsls	r5, r3, #3
 8002bac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bb0:	00d4      	lsls	r4, r2, #3
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	eb12 0a00 	adds.w	sl, r2, r0
 8002bba:	eb43 0b01 	adc.w	fp, r3, r1
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	008b      	lsls	r3, r1, #2
 8002bd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bd6:	0082      	lsls	r2, r0, #2
 8002bd8:	4650      	mov	r0, sl
 8002bda:	4659      	mov	r1, fp
 8002bdc:	f7fd fb50 	bl	8000280 <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <UART_SetConfig+0x38c>)
 8002be6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2164      	movs	r1, #100	; 0x64
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	3332      	adds	r3, #50	; 0x32
 8002bf8:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <UART_SetConfig+0x38c>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	f003 020f 	and.w	r2, r3, #15
 8002c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4432      	add	r2, r6
 8002c0a:	609a      	str	r2, [r3, #8]
}
 8002c0c:	bf00      	nop
 8002c0e:	377c      	adds	r7, #124	; 0x7c
 8002c10:	46bd      	mov	sp, r7
 8002c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c16:	bf00      	nop
 8002c18:	40011000 	.word	0x40011000
 8002c1c:	40011400 	.word	0x40011400
 8002c20:	51eb851f 	.word	0x51eb851f

08002c24 <__errno>:
 8002c24:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <__errno+0x8>)
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	2000000c 	.word	0x2000000c

08002c30 <__libc_init_array>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	4d0d      	ldr	r5, [pc, #52]	; (8002c68 <__libc_init_array+0x38>)
 8002c34:	4c0d      	ldr	r4, [pc, #52]	; (8002c6c <__libc_init_array+0x3c>)
 8002c36:	1b64      	subs	r4, r4, r5
 8002c38:	10a4      	asrs	r4, r4, #2
 8002c3a:	2600      	movs	r6, #0
 8002c3c:	42a6      	cmp	r6, r4
 8002c3e:	d109      	bne.n	8002c54 <__libc_init_array+0x24>
 8002c40:	4d0b      	ldr	r5, [pc, #44]	; (8002c70 <__libc_init_array+0x40>)
 8002c42:	4c0c      	ldr	r4, [pc, #48]	; (8002c74 <__libc_init_array+0x44>)
 8002c44:	f000 fc4e 	bl	80034e4 <_init>
 8002c48:	1b64      	subs	r4, r4, r5
 8002c4a:	10a4      	asrs	r4, r4, #2
 8002c4c:	2600      	movs	r6, #0
 8002c4e:	42a6      	cmp	r6, r4
 8002c50:	d105      	bne.n	8002c5e <__libc_init_array+0x2e>
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c58:	4798      	blx	r3
 8002c5a:	3601      	adds	r6, #1
 8002c5c:	e7ee      	b.n	8002c3c <__libc_init_array+0xc>
 8002c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c62:	4798      	blx	r3
 8002c64:	3601      	adds	r6, #1
 8002c66:	e7f2      	b.n	8002c4e <__libc_init_array+0x1e>
 8002c68:	0800355c 	.word	0x0800355c
 8002c6c:	0800355c 	.word	0x0800355c
 8002c70:	0800355c 	.word	0x0800355c
 8002c74:	08003560 	.word	0x08003560

08002c78 <memset>:
 8002c78:	4402      	add	r2, r0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d100      	bne.n	8002c82 <memset+0xa>
 8002c80:	4770      	bx	lr
 8002c82:	f803 1b01 	strb.w	r1, [r3], #1
 8002c86:	e7f9      	b.n	8002c7c <memset+0x4>

08002c88 <siprintf>:
 8002c88:	b40e      	push	{r1, r2, r3}
 8002c8a:	b500      	push	{lr}
 8002c8c:	b09c      	sub	sp, #112	; 0x70
 8002c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8002c90:	9002      	str	r0, [sp, #8]
 8002c92:	9006      	str	r0, [sp, #24]
 8002c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c98:	4809      	ldr	r0, [pc, #36]	; (8002cc0 <siprintf+0x38>)
 8002c9a:	9107      	str	r1, [sp, #28]
 8002c9c:	9104      	str	r1, [sp, #16]
 8002c9e:	4909      	ldr	r1, [pc, #36]	; (8002cc4 <siprintf+0x3c>)
 8002ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ca4:	9105      	str	r1, [sp, #20]
 8002ca6:	6800      	ldr	r0, [r0, #0]
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	a902      	add	r1, sp, #8
 8002cac:	f000 f868 	bl	8002d80 <_svfiprintf_r>
 8002cb0:	9b02      	ldr	r3, [sp, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	b01c      	add	sp, #112	; 0x70
 8002cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cbc:	b003      	add	sp, #12
 8002cbe:	4770      	bx	lr
 8002cc0:	2000000c 	.word	0x2000000c
 8002cc4:	ffff0208 	.word	0xffff0208

08002cc8 <__ssputs_r>:
 8002cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ccc:	688e      	ldr	r6, [r1, #8]
 8002cce:	429e      	cmp	r6, r3
 8002cd0:	4682      	mov	sl, r0
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	4690      	mov	r8, r2
 8002cd6:	461f      	mov	r7, r3
 8002cd8:	d838      	bhi.n	8002d4c <__ssputs_r+0x84>
 8002cda:	898a      	ldrh	r2, [r1, #12]
 8002cdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ce0:	d032      	beq.n	8002d48 <__ssputs_r+0x80>
 8002ce2:	6825      	ldr	r5, [r4, #0]
 8002ce4:	6909      	ldr	r1, [r1, #16]
 8002ce6:	eba5 0901 	sub.w	r9, r5, r1
 8002cea:	6965      	ldr	r5, [r4, #20]
 8002cec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	444b      	add	r3, r9
 8002cf8:	106d      	asrs	r5, r5, #1
 8002cfa:	429d      	cmp	r5, r3
 8002cfc:	bf38      	it	cc
 8002cfe:	461d      	movcc	r5, r3
 8002d00:	0553      	lsls	r3, r2, #21
 8002d02:	d531      	bpl.n	8002d68 <__ssputs_r+0xa0>
 8002d04:	4629      	mov	r1, r5
 8002d06:	f000 fb47 	bl	8003398 <_malloc_r>
 8002d0a:	4606      	mov	r6, r0
 8002d0c:	b950      	cbnz	r0, 8002d24 <__ssputs_r+0x5c>
 8002d0e:	230c      	movs	r3, #12
 8002d10:	f8ca 3000 	str.w	r3, [sl]
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1a:	81a3      	strh	r3, [r4, #12]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d24:	6921      	ldr	r1, [r4, #16]
 8002d26:	464a      	mov	r2, r9
 8002d28:	f000 fabe 	bl	80032a8 <memcpy>
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d36:	81a3      	strh	r3, [r4, #12]
 8002d38:	6126      	str	r6, [r4, #16]
 8002d3a:	6165      	str	r5, [r4, #20]
 8002d3c:	444e      	add	r6, r9
 8002d3e:	eba5 0509 	sub.w	r5, r5, r9
 8002d42:	6026      	str	r6, [r4, #0]
 8002d44:	60a5      	str	r5, [r4, #8]
 8002d46:	463e      	mov	r6, r7
 8002d48:	42be      	cmp	r6, r7
 8002d4a:	d900      	bls.n	8002d4e <__ssputs_r+0x86>
 8002d4c:	463e      	mov	r6, r7
 8002d4e:	4632      	mov	r2, r6
 8002d50:	6820      	ldr	r0, [r4, #0]
 8002d52:	4641      	mov	r1, r8
 8002d54:	f000 fab6 	bl	80032c4 <memmove>
 8002d58:	68a3      	ldr	r3, [r4, #8]
 8002d5a:	6822      	ldr	r2, [r4, #0]
 8002d5c:	1b9b      	subs	r3, r3, r6
 8002d5e:	4432      	add	r2, r6
 8002d60:	60a3      	str	r3, [r4, #8]
 8002d62:	6022      	str	r2, [r4, #0]
 8002d64:	2000      	movs	r0, #0
 8002d66:	e7db      	b.n	8002d20 <__ssputs_r+0x58>
 8002d68:	462a      	mov	r2, r5
 8002d6a:	f000 fb6f 	bl	800344c <_realloc_r>
 8002d6e:	4606      	mov	r6, r0
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d1e1      	bne.n	8002d38 <__ssputs_r+0x70>
 8002d74:	6921      	ldr	r1, [r4, #16]
 8002d76:	4650      	mov	r0, sl
 8002d78:	f000 fabe 	bl	80032f8 <_free_r>
 8002d7c:	e7c7      	b.n	8002d0e <__ssputs_r+0x46>
	...

08002d80 <_svfiprintf_r>:
 8002d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d84:	4698      	mov	r8, r3
 8002d86:	898b      	ldrh	r3, [r1, #12]
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	b09d      	sub	sp, #116	; 0x74
 8002d8c:	4607      	mov	r7, r0
 8002d8e:	460d      	mov	r5, r1
 8002d90:	4614      	mov	r4, r2
 8002d92:	d50e      	bpl.n	8002db2 <_svfiprintf_r+0x32>
 8002d94:	690b      	ldr	r3, [r1, #16]
 8002d96:	b963      	cbnz	r3, 8002db2 <_svfiprintf_r+0x32>
 8002d98:	2140      	movs	r1, #64	; 0x40
 8002d9a:	f000 fafd 	bl	8003398 <_malloc_r>
 8002d9e:	6028      	str	r0, [r5, #0]
 8002da0:	6128      	str	r0, [r5, #16]
 8002da2:	b920      	cbnz	r0, 8002dae <_svfiprintf_r+0x2e>
 8002da4:	230c      	movs	r3, #12
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	e0d1      	b.n	8002f52 <_svfiprintf_r+0x1d2>
 8002dae:	2340      	movs	r3, #64	; 0x40
 8002db0:	616b      	str	r3, [r5, #20]
 8002db2:	2300      	movs	r3, #0
 8002db4:	9309      	str	r3, [sp, #36]	; 0x24
 8002db6:	2320      	movs	r3, #32
 8002db8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dc0:	2330      	movs	r3, #48	; 0x30
 8002dc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002f6c <_svfiprintf_r+0x1ec>
 8002dc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dca:	f04f 0901 	mov.w	r9, #1
 8002dce:	4623      	mov	r3, r4
 8002dd0:	469a      	mov	sl, r3
 8002dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dd6:	b10a      	cbz	r2, 8002ddc <_svfiprintf_r+0x5c>
 8002dd8:	2a25      	cmp	r2, #37	; 0x25
 8002dda:	d1f9      	bne.n	8002dd0 <_svfiprintf_r+0x50>
 8002ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8002de0:	d00b      	beq.n	8002dfa <_svfiprintf_r+0x7a>
 8002de2:	465b      	mov	r3, fp
 8002de4:	4622      	mov	r2, r4
 8002de6:	4629      	mov	r1, r5
 8002de8:	4638      	mov	r0, r7
 8002dea:	f7ff ff6d 	bl	8002cc8 <__ssputs_r>
 8002dee:	3001      	adds	r0, #1
 8002df0:	f000 80aa 	beq.w	8002f48 <_svfiprintf_r+0x1c8>
 8002df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002df6:	445a      	add	r2, fp
 8002df8:	9209      	str	r2, [sp, #36]	; 0x24
 8002dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80a2 	beq.w	8002f48 <_svfiprintf_r+0x1c8>
 8002e04:	2300      	movs	r3, #0
 8002e06:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e0e:	f10a 0a01 	add.w	sl, sl, #1
 8002e12:	9304      	str	r3, [sp, #16]
 8002e14:	9307      	str	r3, [sp, #28]
 8002e16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e1a:	931a      	str	r3, [sp, #104]	; 0x68
 8002e1c:	4654      	mov	r4, sl
 8002e1e:	2205      	movs	r2, #5
 8002e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e24:	4851      	ldr	r0, [pc, #324]	; (8002f6c <_svfiprintf_r+0x1ec>)
 8002e26:	f7fd f9db 	bl	80001e0 <memchr>
 8002e2a:	9a04      	ldr	r2, [sp, #16]
 8002e2c:	b9d8      	cbnz	r0, 8002e66 <_svfiprintf_r+0xe6>
 8002e2e:	06d0      	lsls	r0, r2, #27
 8002e30:	bf44      	itt	mi
 8002e32:	2320      	movmi	r3, #32
 8002e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e38:	0711      	lsls	r1, r2, #28
 8002e3a:	bf44      	itt	mi
 8002e3c:	232b      	movmi	r3, #43	; 0x2b
 8002e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e42:	f89a 3000 	ldrb.w	r3, [sl]
 8002e46:	2b2a      	cmp	r3, #42	; 0x2a
 8002e48:	d015      	beq.n	8002e76 <_svfiprintf_r+0xf6>
 8002e4a:	9a07      	ldr	r2, [sp, #28]
 8002e4c:	4654      	mov	r4, sl
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f04f 0c0a 	mov.w	ip, #10
 8002e54:	4621      	mov	r1, r4
 8002e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e5a:	3b30      	subs	r3, #48	; 0x30
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	d94e      	bls.n	8002efe <_svfiprintf_r+0x17e>
 8002e60:	b1b0      	cbz	r0, 8002e90 <_svfiprintf_r+0x110>
 8002e62:	9207      	str	r2, [sp, #28]
 8002e64:	e014      	b.n	8002e90 <_svfiprintf_r+0x110>
 8002e66:	eba0 0308 	sub.w	r3, r0, r8
 8002e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	9304      	str	r3, [sp, #16]
 8002e72:	46a2      	mov	sl, r4
 8002e74:	e7d2      	b.n	8002e1c <_svfiprintf_r+0x9c>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	1d19      	adds	r1, r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	9103      	str	r1, [sp, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bfbb      	ittet	lt
 8002e82:	425b      	neglt	r3, r3
 8002e84:	f042 0202 	orrlt.w	r2, r2, #2
 8002e88:	9307      	strge	r3, [sp, #28]
 8002e8a:	9307      	strlt	r3, [sp, #28]
 8002e8c:	bfb8      	it	lt
 8002e8e:	9204      	strlt	r2, [sp, #16]
 8002e90:	7823      	ldrb	r3, [r4, #0]
 8002e92:	2b2e      	cmp	r3, #46	; 0x2e
 8002e94:	d10c      	bne.n	8002eb0 <_svfiprintf_r+0x130>
 8002e96:	7863      	ldrb	r3, [r4, #1]
 8002e98:	2b2a      	cmp	r3, #42	; 0x2a
 8002e9a:	d135      	bne.n	8002f08 <_svfiprintf_r+0x188>
 8002e9c:	9b03      	ldr	r3, [sp, #12]
 8002e9e:	1d1a      	adds	r2, r3, #4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	9203      	str	r2, [sp, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bfb8      	it	lt
 8002ea8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eac:	3402      	adds	r4, #2
 8002eae:	9305      	str	r3, [sp, #20]
 8002eb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f7c <_svfiprintf_r+0x1fc>
 8002eb4:	7821      	ldrb	r1, [r4, #0]
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	4650      	mov	r0, sl
 8002eba:	f7fd f991 	bl	80001e0 <memchr>
 8002ebe:	b140      	cbz	r0, 8002ed2 <_svfiprintf_r+0x152>
 8002ec0:	2340      	movs	r3, #64	; 0x40
 8002ec2:	eba0 000a 	sub.w	r0, r0, sl
 8002ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8002eca:	9b04      	ldr	r3, [sp, #16]
 8002ecc:	4303      	orrs	r3, r0
 8002ece:	3401      	adds	r4, #1
 8002ed0:	9304      	str	r3, [sp, #16]
 8002ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed6:	4826      	ldr	r0, [pc, #152]	; (8002f70 <_svfiprintf_r+0x1f0>)
 8002ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002edc:	2206      	movs	r2, #6
 8002ede:	f7fd f97f 	bl	80001e0 <memchr>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d038      	beq.n	8002f58 <_svfiprintf_r+0x1d8>
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <_svfiprintf_r+0x1f4>)
 8002ee8:	bb1b      	cbnz	r3, 8002f32 <_svfiprintf_r+0x1b2>
 8002eea:	9b03      	ldr	r3, [sp, #12]
 8002eec:	3307      	adds	r3, #7
 8002eee:	f023 0307 	bic.w	r3, r3, #7
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	9303      	str	r3, [sp, #12]
 8002ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ef8:	4433      	add	r3, r6
 8002efa:	9309      	str	r3, [sp, #36]	; 0x24
 8002efc:	e767      	b.n	8002dce <_svfiprintf_r+0x4e>
 8002efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f02:	460c      	mov	r4, r1
 8002f04:	2001      	movs	r0, #1
 8002f06:	e7a5      	b.n	8002e54 <_svfiprintf_r+0xd4>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	3401      	adds	r4, #1
 8002f0c:	9305      	str	r3, [sp, #20]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f04f 0c0a 	mov.w	ip, #10
 8002f14:	4620      	mov	r0, r4
 8002f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f1a:	3a30      	subs	r2, #48	; 0x30
 8002f1c:	2a09      	cmp	r2, #9
 8002f1e:	d903      	bls.n	8002f28 <_svfiprintf_r+0x1a8>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0c5      	beq.n	8002eb0 <_svfiprintf_r+0x130>
 8002f24:	9105      	str	r1, [sp, #20]
 8002f26:	e7c3      	b.n	8002eb0 <_svfiprintf_r+0x130>
 8002f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e7f0      	b.n	8002f14 <_svfiprintf_r+0x194>
 8002f32:	ab03      	add	r3, sp, #12
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	462a      	mov	r2, r5
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <_svfiprintf_r+0x1f8>)
 8002f3a:	a904      	add	r1, sp, #16
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	f3af 8000 	nop.w
 8002f42:	1c42      	adds	r2, r0, #1
 8002f44:	4606      	mov	r6, r0
 8002f46:	d1d6      	bne.n	8002ef6 <_svfiprintf_r+0x176>
 8002f48:	89ab      	ldrh	r3, [r5, #12]
 8002f4a:	065b      	lsls	r3, r3, #25
 8002f4c:	f53f af2c 	bmi.w	8002da8 <_svfiprintf_r+0x28>
 8002f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f52:	b01d      	add	sp, #116	; 0x74
 8002f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f58:	ab03      	add	r3, sp, #12
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	462a      	mov	r2, r5
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <_svfiprintf_r+0x1f8>)
 8002f60:	a904      	add	r1, sp, #16
 8002f62:	4638      	mov	r0, r7
 8002f64:	f000 f87a 	bl	800305c <_printf_i>
 8002f68:	e7eb      	b.n	8002f42 <_svfiprintf_r+0x1c2>
 8002f6a:	bf00      	nop
 8002f6c:	08003520 	.word	0x08003520
 8002f70:	0800352a 	.word	0x0800352a
 8002f74:	00000000 	.word	0x00000000
 8002f78:	08002cc9 	.word	0x08002cc9
 8002f7c:	08003526 	.word	0x08003526

08002f80 <_printf_common>:
 8002f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f84:	4616      	mov	r6, r2
 8002f86:	4699      	mov	r9, r3
 8002f88:	688a      	ldr	r2, [r1, #8]
 8002f8a:	690b      	ldr	r3, [r1, #16]
 8002f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bfb8      	it	lt
 8002f94:	4613      	movlt	r3, r2
 8002f96:	6033      	str	r3, [r6, #0]
 8002f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f9c:	4607      	mov	r7, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	b10a      	cbz	r2, 8002fa6 <_printf_common+0x26>
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	6033      	str	r3, [r6, #0]
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	0699      	lsls	r1, r3, #26
 8002faa:	bf42      	ittt	mi
 8002fac:	6833      	ldrmi	r3, [r6, #0]
 8002fae:	3302      	addmi	r3, #2
 8002fb0:	6033      	strmi	r3, [r6, #0]
 8002fb2:	6825      	ldr	r5, [r4, #0]
 8002fb4:	f015 0506 	ands.w	r5, r5, #6
 8002fb8:	d106      	bne.n	8002fc8 <_printf_common+0x48>
 8002fba:	f104 0a19 	add.w	sl, r4, #25
 8002fbe:	68e3      	ldr	r3, [r4, #12]
 8002fc0:	6832      	ldr	r2, [r6, #0]
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	42ab      	cmp	r3, r5
 8002fc6:	dc26      	bgt.n	8003016 <_printf_common+0x96>
 8002fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fcc:	1e13      	subs	r3, r2, #0
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	bf18      	it	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	0692      	lsls	r2, r2, #26
 8002fd6:	d42b      	bmi.n	8003030 <_printf_common+0xb0>
 8002fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fdc:	4649      	mov	r1, r9
 8002fde:	4638      	mov	r0, r7
 8002fe0:	47c0      	blx	r8
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	d01e      	beq.n	8003024 <_printf_common+0xa4>
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	68e5      	ldr	r5, [r4, #12]
 8002fea:	6832      	ldr	r2, [r6, #0]
 8002fec:	f003 0306 	and.w	r3, r3, #6
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	bf08      	it	eq
 8002ff4:	1aad      	subeq	r5, r5, r2
 8002ff6:	68a3      	ldr	r3, [r4, #8]
 8002ff8:	6922      	ldr	r2, [r4, #16]
 8002ffa:	bf0c      	ite	eq
 8002ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003000:	2500      	movne	r5, #0
 8003002:	4293      	cmp	r3, r2
 8003004:	bfc4      	itt	gt
 8003006:	1a9b      	subgt	r3, r3, r2
 8003008:	18ed      	addgt	r5, r5, r3
 800300a:	2600      	movs	r6, #0
 800300c:	341a      	adds	r4, #26
 800300e:	42b5      	cmp	r5, r6
 8003010:	d11a      	bne.n	8003048 <_printf_common+0xc8>
 8003012:	2000      	movs	r0, #0
 8003014:	e008      	b.n	8003028 <_printf_common+0xa8>
 8003016:	2301      	movs	r3, #1
 8003018:	4652      	mov	r2, sl
 800301a:	4649      	mov	r1, r9
 800301c:	4638      	mov	r0, r7
 800301e:	47c0      	blx	r8
 8003020:	3001      	adds	r0, #1
 8003022:	d103      	bne.n	800302c <_printf_common+0xac>
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302c:	3501      	adds	r5, #1
 800302e:	e7c6      	b.n	8002fbe <_printf_common+0x3e>
 8003030:	18e1      	adds	r1, r4, r3
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	2030      	movs	r0, #48	; 0x30
 8003036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800303a:	4422      	add	r2, r4
 800303c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003044:	3302      	adds	r3, #2
 8003046:	e7c7      	b.n	8002fd8 <_printf_common+0x58>
 8003048:	2301      	movs	r3, #1
 800304a:	4622      	mov	r2, r4
 800304c:	4649      	mov	r1, r9
 800304e:	4638      	mov	r0, r7
 8003050:	47c0      	blx	r8
 8003052:	3001      	adds	r0, #1
 8003054:	d0e6      	beq.n	8003024 <_printf_common+0xa4>
 8003056:	3601      	adds	r6, #1
 8003058:	e7d9      	b.n	800300e <_printf_common+0x8e>
	...

0800305c <_printf_i>:
 800305c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003060:	460c      	mov	r4, r1
 8003062:	4691      	mov	r9, r2
 8003064:	7e27      	ldrb	r7, [r4, #24]
 8003066:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003068:	2f78      	cmp	r7, #120	; 0x78
 800306a:	4680      	mov	r8, r0
 800306c:	469a      	mov	sl, r3
 800306e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003072:	d807      	bhi.n	8003084 <_printf_i+0x28>
 8003074:	2f62      	cmp	r7, #98	; 0x62
 8003076:	d80a      	bhi.n	800308e <_printf_i+0x32>
 8003078:	2f00      	cmp	r7, #0
 800307a:	f000 80d8 	beq.w	800322e <_printf_i+0x1d2>
 800307e:	2f58      	cmp	r7, #88	; 0x58
 8003080:	f000 80a3 	beq.w	80031ca <_printf_i+0x16e>
 8003084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800308c:	e03a      	b.n	8003104 <_printf_i+0xa8>
 800308e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003092:	2b15      	cmp	r3, #21
 8003094:	d8f6      	bhi.n	8003084 <_printf_i+0x28>
 8003096:	a001      	add	r0, pc, #4	; (adr r0, 800309c <_printf_i+0x40>)
 8003098:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800309c:	080030f5 	.word	0x080030f5
 80030a0:	08003109 	.word	0x08003109
 80030a4:	08003085 	.word	0x08003085
 80030a8:	08003085 	.word	0x08003085
 80030ac:	08003085 	.word	0x08003085
 80030b0:	08003085 	.word	0x08003085
 80030b4:	08003109 	.word	0x08003109
 80030b8:	08003085 	.word	0x08003085
 80030bc:	08003085 	.word	0x08003085
 80030c0:	08003085 	.word	0x08003085
 80030c4:	08003085 	.word	0x08003085
 80030c8:	08003215 	.word	0x08003215
 80030cc:	08003139 	.word	0x08003139
 80030d0:	080031f7 	.word	0x080031f7
 80030d4:	08003085 	.word	0x08003085
 80030d8:	08003085 	.word	0x08003085
 80030dc:	08003237 	.word	0x08003237
 80030e0:	08003085 	.word	0x08003085
 80030e4:	08003139 	.word	0x08003139
 80030e8:	08003085 	.word	0x08003085
 80030ec:	08003085 	.word	0x08003085
 80030f0:	080031ff 	.word	0x080031ff
 80030f4:	680b      	ldr	r3, [r1, #0]
 80030f6:	1d1a      	adds	r2, r3, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	600a      	str	r2, [r1, #0]
 80030fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003104:	2301      	movs	r3, #1
 8003106:	e0a3      	b.n	8003250 <_printf_i+0x1f4>
 8003108:	6825      	ldr	r5, [r4, #0]
 800310a:	6808      	ldr	r0, [r1, #0]
 800310c:	062e      	lsls	r6, r5, #24
 800310e:	f100 0304 	add.w	r3, r0, #4
 8003112:	d50a      	bpl.n	800312a <_printf_i+0xce>
 8003114:	6805      	ldr	r5, [r0, #0]
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	2d00      	cmp	r5, #0
 800311a:	da03      	bge.n	8003124 <_printf_i+0xc8>
 800311c:	232d      	movs	r3, #45	; 0x2d
 800311e:	426d      	negs	r5, r5
 8003120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003124:	485e      	ldr	r0, [pc, #376]	; (80032a0 <_printf_i+0x244>)
 8003126:	230a      	movs	r3, #10
 8003128:	e019      	b.n	800315e <_printf_i+0x102>
 800312a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800312e:	6805      	ldr	r5, [r0, #0]
 8003130:	600b      	str	r3, [r1, #0]
 8003132:	bf18      	it	ne
 8003134:	b22d      	sxthne	r5, r5
 8003136:	e7ef      	b.n	8003118 <_printf_i+0xbc>
 8003138:	680b      	ldr	r3, [r1, #0]
 800313a:	6825      	ldr	r5, [r4, #0]
 800313c:	1d18      	adds	r0, r3, #4
 800313e:	6008      	str	r0, [r1, #0]
 8003140:	0628      	lsls	r0, r5, #24
 8003142:	d501      	bpl.n	8003148 <_printf_i+0xec>
 8003144:	681d      	ldr	r5, [r3, #0]
 8003146:	e002      	b.n	800314e <_printf_i+0xf2>
 8003148:	0669      	lsls	r1, r5, #25
 800314a:	d5fb      	bpl.n	8003144 <_printf_i+0xe8>
 800314c:	881d      	ldrh	r5, [r3, #0]
 800314e:	4854      	ldr	r0, [pc, #336]	; (80032a0 <_printf_i+0x244>)
 8003150:	2f6f      	cmp	r7, #111	; 0x6f
 8003152:	bf0c      	ite	eq
 8003154:	2308      	moveq	r3, #8
 8003156:	230a      	movne	r3, #10
 8003158:	2100      	movs	r1, #0
 800315a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800315e:	6866      	ldr	r6, [r4, #4]
 8003160:	60a6      	str	r6, [r4, #8]
 8003162:	2e00      	cmp	r6, #0
 8003164:	bfa2      	ittt	ge
 8003166:	6821      	ldrge	r1, [r4, #0]
 8003168:	f021 0104 	bicge.w	r1, r1, #4
 800316c:	6021      	strge	r1, [r4, #0]
 800316e:	b90d      	cbnz	r5, 8003174 <_printf_i+0x118>
 8003170:	2e00      	cmp	r6, #0
 8003172:	d04d      	beq.n	8003210 <_printf_i+0x1b4>
 8003174:	4616      	mov	r6, r2
 8003176:	fbb5 f1f3 	udiv	r1, r5, r3
 800317a:	fb03 5711 	mls	r7, r3, r1, r5
 800317e:	5dc7      	ldrb	r7, [r0, r7]
 8003180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003184:	462f      	mov	r7, r5
 8003186:	42bb      	cmp	r3, r7
 8003188:	460d      	mov	r5, r1
 800318a:	d9f4      	bls.n	8003176 <_printf_i+0x11a>
 800318c:	2b08      	cmp	r3, #8
 800318e:	d10b      	bne.n	80031a8 <_printf_i+0x14c>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	07df      	lsls	r7, r3, #31
 8003194:	d508      	bpl.n	80031a8 <_printf_i+0x14c>
 8003196:	6923      	ldr	r3, [r4, #16]
 8003198:	6861      	ldr	r1, [r4, #4]
 800319a:	4299      	cmp	r1, r3
 800319c:	bfde      	ittt	le
 800319e:	2330      	movle	r3, #48	; 0x30
 80031a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031a8:	1b92      	subs	r2, r2, r6
 80031aa:	6122      	str	r2, [r4, #16]
 80031ac:	f8cd a000 	str.w	sl, [sp]
 80031b0:	464b      	mov	r3, r9
 80031b2:	aa03      	add	r2, sp, #12
 80031b4:	4621      	mov	r1, r4
 80031b6:	4640      	mov	r0, r8
 80031b8:	f7ff fee2 	bl	8002f80 <_printf_common>
 80031bc:	3001      	adds	r0, #1
 80031be:	d14c      	bne.n	800325a <_printf_i+0x1fe>
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	b004      	add	sp, #16
 80031c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ca:	4835      	ldr	r0, [pc, #212]	; (80032a0 <_printf_i+0x244>)
 80031cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	680e      	ldr	r6, [r1, #0]
 80031d4:	061f      	lsls	r7, r3, #24
 80031d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80031da:	600e      	str	r6, [r1, #0]
 80031dc:	d514      	bpl.n	8003208 <_printf_i+0x1ac>
 80031de:	07d9      	lsls	r1, r3, #31
 80031e0:	bf44      	itt	mi
 80031e2:	f043 0320 	orrmi.w	r3, r3, #32
 80031e6:	6023      	strmi	r3, [r4, #0]
 80031e8:	b91d      	cbnz	r5, 80031f2 <_printf_i+0x196>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	f023 0320 	bic.w	r3, r3, #32
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	2310      	movs	r3, #16
 80031f4:	e7b0      	b.n	8003158 <_printf_i+0xfc>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	f043 0320 	orr.w	r3, r3, #32
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	2378      	movs	r3, #120	; 0x78
 8003200:	4828      	ldr	r0, [pc, #160]	; (80032a4 <_printf_i+0x248>)
 8003202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003206:	e7e3      	b.n	80031d0 <_printf_i+0x174>
 8003208:	065e      	lsls	r6, r3, #25
 800320a:	bf48      	it	mi
 800320c:	b2ad      	uxthmi	r5, r5
 800320e:	e7e6      	b.n	80031de <_printf_i+0x182>
 8003210:	4616      	mov	r6, r2
 8003212:	e7bb      	b.n	800318c <_printf_i+0x130>
 8003214:	680b      	ldr	r3, [r1, #0]
 8003216:	6826      	ldr	r6, [r4, #0]
 8003218:	6960      	ldr	r0, [r4, #20]
 800321a:	1d1d      	adds	r5, r3, #4
 800321c:	600d      	str	r5, [r1, #0]
 800321e:	0635      	lsls	r5, r6, #24
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	d501      	bpl.n	8003228 <_printf_i+0x1cc>
 8003224:	6018      	str	r0, [r3, #0]
 8003226:	e002      	b.n	800322e <_printf_i+0x1d2>
 8003228:	0671      	lsls	r1, r6, #25
 800322a:	d5fb      	bpl.n	8003224 <_printf_i+0x1c8>
 800322c:	8018      	strh	r0, [r3, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	6123      	str	r3, [r4, #16]
 8003232:	4616      	mov	r6, r2
 8003234:	e7ba      	b.n	80031ac <_printf_i+0x150>
 8003236:	680b      	ldr	r3, [r1, #0]
 8003238:	1d1a      	adds	r2, r3, #4
 800323a:	600a      	str	r2, [r1, #0]
 800323c:	681e      	ldr	r6, [r3, #0]
 800323e:	6862      	ldr	r2, [r4, #4]
 8003240:	2100      	movs	r1, #0
 8003242:	4630      	mov	r0, r6
 8003244:	f7fc ffcc 	bl	80001e0 <memchr>
 8003248:	b108      	cbz	r0, 800324e <_printf_i+0x1f2>
 800324a:	1b80      	subs	r0, r0, r6
 800324c:	6060      	str	r0, [r4, #4]
 800324e:	6863      	ldr	r3, [r4, #4]
 8003250:	6123      	str	r3, [r4, #16]
 8003252:	2300      	movs	r3, #0
 8003254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003258:	e7a8      	b.n	80031ac <_printf_i+0x150>
 800325a:	6923      	ldr	r3, [r4, #16]
 800325c:	4632      	mov	r2, r6
 800325e:	4649      	mov	r1, r9
 8003260:	4640      	mov	r0, r8
 8003262:	47d0      	blx	sl
 8003264:	3001      	adds	r0, #1
 8003266:	d0ab      	beq.n	80031c0 <_printf_i+0x164>
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	079b      	lsls	r3, r3, #30
 800326c:	d413      	bmi.n	8003296 <_printf_i+0x23a>
 800326e:	68e0      	ldr	r0, [r4, #12]
 8003270:	9b03      	ldr	r3, [sp, #12]
 8003272:	4298      	cmp	r0, r3
 8003274:	bfb8      	it	lt
 8003276:	4618      	movlt	r0, r3
 8003278:	e7a4      	b.n	80031c4 <_printf_i+0x168>
 800327a:	2301      	movs	r3, #1
 800327c:	4632      	mov	r2, r6
 800327e:	4649      	mov	r1, r9
 8003280:	4640      	mov	r0, r8
 8003282:	47d0      	blx	sl
 8003284:	3001      	adds	r0, #1
 8003286:	d09b      	beq.n	80031c0 <_printf_i+0x164>
 8003288:	3501      	adds	r5, #1
 800328a:	68e3      	ldr	r3, [r4, #12]
 800328c:	9903      	ldr	r1, [sp, #12]
 800328e:	1a5b      	subs	r3, r3, r1
 8003290:	42ab      	cmp	r3, r5
 8003292:	dcf2      	bgt.n	800327a <_printf_i+0x21e>
 8003294:	e7eb      	b.n	800326e <_printf_i+0x212>
 8003296:	2500      	movs	r5, #0
 8003298:	f104 0619 	add.w	r6, r4, #25
 800329c:	e7f5      	b.n	800328a <_printf_i+0x22e>
 800329e:	bf00      	nop
 80032a0:	08003531 	.word	0x08003531
 80032a4:	08003542 	.word	0x08003542

080032a8 <memcpy>:
 80032a8:	440a      	add	r2, r1
 80032aa:	4291      	cmp	r1, r2
 80032ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80032b0:	d100      	bne.n	80032b4 <memcpy+0xc>
 80032b2:	4770      	bx	lr
 80032b4:	b510      	push	{r4, lr}
 80032b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032be:	4291      	cmp	r1, r2
 80032c0:	d1f9      	bne.n	80032b6 <memcpy+0xe>
 80032c2:	bd10      	pop	{r4, pc}

080032c4 <memmove>:
 80032c4:	4288      	cmp	r0, r1
 80032c6:	b510      	push	{r4, lr}
 80032c8:	eb01 0402 	add.w	r4, r1, r2
 80032cc:	d902      	bls.n	80032d4 <memmove+0x10>
 80032ce:	4284      	cmp	r4, r0
 80032d0:	4623      	mov	r3, r4
 80032d2:	d807      	bhi.n	80032e4 <memmove+0x20>
 80032d4:	1e43      	subs	r3, r0, #1
 80032d6:	42a1      	cmp	r1, r4
 80032d8:	d008      	beq.n	80032ec <memmove+0x28>
 80032da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032e2:	e7f8      	b.n	80032d6 <memmove+0x12>
 80032e4:	4402      	add	r2, r0
 80032e6:	4601      	mov	r1, r0
 80032e8:	428a      	cmp	r2, r1
 80032ea:	d100      	bne.n	80032ee <memmove+0x2a>
 80032ec:	bd10      	pop	{r4, pc}
 80032ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032f6:	e7f7      	b.n	80032e8 <memmove+0x24>

080032f8 <_free_r>:
 80032f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032fa:	2900      	cmp	r1, #0
 80032fc:	d048      	beq.n	8003390 <_free_r+0x98>
 80032fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003302:	9001      	str	r0, [sp, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f1a1 0404 	sub.w	r4, r1, #4
 800330a:	bfb8      	it	lt
 800330c:	18e4      	addlt	r4, r4, r3
 800330e:	f000 f8d3 	bl	80034b8 <__malloc_lock>
 8003312:	4a20      	ldr	r2, [pc, #128]	; (8003394 <_free_r+0x9c>)
 8003314:	9801      	ldr	r0, [sp, #4]
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	4615      	mov	r5, r2
 800331a:	b933      	cbnz	r3, 800332a <_free_r+0x32>
 800331c:	6063      	str	r3, [r4, #4]
 800331e:	6014      	str	r4, [r2, #0]
 8003320:	b003      	add	sp, #12
 8003322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003326:	f000 b8cd 	b.w	80034c4 <__malloc_unlock>
 800332a:	42a3      	cmp	r3, r4
 800332c:	d90b      	bls.n	8003346 <_free_r+0x4e>
 800332e:	6821      	ldr	r1, [r4, #0]
 8003330:	1862      	adds	r2, r4, r1
 8003332:	4293      	cmp	r3, r2
 8003334:	bf04      	itt	eq
 8003336:	681a      	ldreq	r2, [r3, #0]
 8003338:	685b      	ldreq	r3, [r3, #4]
 800333a:	6063      	str	r3, [r4, #4]
 800333c:	bf04      	itt	eq
 800333e:	1852      	addeq	r2, r2, r1
 8003340:	6022      	streq	r2, [r4, #0]
 8003342:	602c      	str	r4, [r5, #0]
 8003344:	e7ec      	b.n	8003320 <_free_r+0x28>
 8003346:	461a      	mov	r2, r3
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b10b      	cbz	r3, 8003350 <_free_r+0x58>
 800334c:	42a3      	cmp	r3, r4
 800334e:	d9fa      	bls.n	8003346 <_free_r+0x4e>
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	1855      	adds	r5, r2, r1
 8003354:	42a5      	cmp	r5, r4
 8003356:	d10b      	bne.n	8003370 <_free_r+0x78>
 8003358:	6824      	ldr	r4, [r4, #0]
 800335a:	4421      	add	r1, r4
 800335c:	1854      	adds	r4, r2, r1
 800335e:	42a3      	cmp	r3, r4
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	d1dd      	bne.n	8003320 <_free_r+0x28>
 8003364:	681c      	ldr	r4, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	6053      	str	r3, [r2, #4]
 800336a:	4421      	add	r1, r4
 800336c:	6011      	str	r1, [r2, #0]
 800336e:	e7d7      	b.n	8003320 <_free_r+0x28>
 8003370:	d902      	bls.n	8003378 <_free_r+0x80>
 8003372:	230c      	movs	r3, #12
 8003374:	6003      	str	r3, [r0, #0]
 8003376:	e7d3      	b.n	8003320 <_free_r+0x28>
 8003378:	6825      	ldr	r5, [r4, #0]
 800337a:	1961      	adds	r1, r4, r5
 800337c:	428b      	cmp	r3, r1
 800337e:	bf04      	itt	eq
 8003380:	6819      	ldreq	r1, [r3, #0]
 8003382:	685b      	ldreq	r3, [r3, #4]
 8003384:	6063      	str	r3, [r4, #4]
 8003386:	bf04      	itt	eq
 8003388:	1949      	addeq	r1, r1, r5
 800338a:	6021      	streq	r1, [r4, #0]
 800338c:	6054      	str	r4, [r2, #4]
 800338e:	e7c7      	b.n	8003320 <_free_r+0x28>
 8003390:	b003      	add	sp, #12
 8003392:	bd30      	pop	{r4, r5, pc}
 8003394:	20000090 	.word	0x20000090

08003398 <_malloc_r>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	1ccd      	adds	r5, r1, #3
 800339c:	f025 0503 	bic.w	r5, r5, #3
 80033a0:	3508      	adds	r5, #8
 80033a2:	2d0c      	cmp	r5, #12
 80033a4:	bf38      	it	cc
 80033a6:	250c      	movcc	r5, #12
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	4606      	mov	r6, r0
 80033ac:	db01      	blt.n	80033b2 <_malloc_r+0x1a>
 80033ae:	42a9      	cmp	r1, r5
 80033b0:	d903      	bls.n	80033ba <_malloc_r+0x22>
 80033b2:	230c      	movs	r3, #12
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	2000      	movs	r0, #0
 80033b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ba:	f000 f87d 	bl	80034b8 <__malloc_lock>
 80033be:	4921      	ldr	r1, [pc, #132]	; (8003444 <_malloc_r+0xac>)
 80033c0:	680a      	ldr	r2, [r1, #0]
 80033c2:	4614      	mov	r4, r2
 80033c4:	b99c      	cbnz	r4, 80033ee <_malloc_r+0x56>
 80033c6:	4f20      	ldr	r7, [pc, #128]	; (8003448 <_malloc_r+0xb0>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b923      	cbnz	r3, 80033d6 <_malloc_r+0x3e>
 80033cc:	4621      	mov	r1, r4
 80033ce:	4630      	mov	r0, r6
 80033d0:	f000 f862 	bl	8003498 <_sbrk_r>
 80033d4:	6038      	str	r0, [r7, #0]
 80033d6:	4629      	mov	r1, r5
 80033d8:	4630      	mov	r0, r6
 80033da:	f000 f85d 	bl	8003498 <_sbrk_r>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d123      	bne.n	800342a <_malloc_r+0x92>
 80033e2:	230c      	movs	r3, #12
 80033e4:	6033      	str	r3, [r6, #0]
 80033e6:	4630      	mov	r0, r6
 80033e8:	f000 f86c 	bl	80034c4 <__malloc_unlock>
 80033ec:	e7e3      	b.n	80033b6 <_malloc_r+0x1e>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	1b5b      	subs	r3, r3, r5
 80033f2:	d417      	bmi.n	8003424 <_malloc_r+0x8c>
 80033f4:	2b0b      	cmp	r3, #11
 80033f6:	d903      	bls.n	8003400 <_malloc_r+0x68>
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	441c      	add	r4, r3
 80033fc:	6025      	str	r5, [r4, #0]
 80033fe:	e004      	b.n	800340a <_malloc_r+0x72>
 8003400:	6863      	ldr	r3, [r4, #4]
 8003402:	42a2      	cmp	r2, r4
 8003404:	bf0c      	ite	eq
 8003406:	600b      	streq	r3, [r1, #0]
 8003408:	6053      	strne	r3, [r2, #4]
 800340a:	4630      	mov	r0, r6
 800340c:	f000 f85a 	bl	80034c4 <__malloc_unlock>
 8003410:	f104 000b 	add.w	r0, r4, #11
 8003414:	1d23      	adds	r3, r4, #4
 8003416:	f020 0007 	bic.w	r0, r0, #7
 800341a:	1ac2      	subs	r2, r0, r3
 800341c:	d0cc      	beq.n	80033b8 <_malloc_r+0x20>
 800341e:	1a1b      	subs	r3, r3, r0
 8003420:	50a3      	str	r3, [r4, r2]
 8003422:	e7c9      	b.n	80033b8 <_malloc_r+0x20>
 8003424:	4622      	mov	r2, r4
 8003426:	6864      	ldr	r4, [r4, #4]
 8003428:	e7cc      	b.n	80033c4 <_malloc_r+0x2c>
 800342a:	1cc4      	adds	r4, r0, #3
 800342c:	f024 0403 	bic.w	r4, r4, #3
 8003430:	42a0      	cmp	r0, r4
 8003432:	d0e3      	beq.n	80033fc <_malloc_r+0x64>
 8003434:	1a21      	subs	r1, r4, r0
 8003436:	4630      	mov	r0, r6
 8003438:	f000 f82e 	bl	8003498 <_sbrk_r>
 800343c:	3001      	adds	r0, #1
 800343e:	d1dd      	bne.n	80033fc <_malloc_r+0x64>
 8003440:	e7cf      	b.n	80033e2 <_malloc_r+0x4a>
 8003442:	bf00      	nop
 8003444:	20000090 	.word	0x20000090
 8003448:	20000094 	.word	0x20000094

0800344c <_realloc_r>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	4607      	mov	r7, r0
 8003450:	4614      	mov	r4, r2
 8003452:	460e      	mov	r6, r1
 8003454:	b921      	cbnz	r1, 8003460 <_realloc_r+0x14>
 8003456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800345a:	4611      	mov	r1, r2
 800345c:	f7ff bf9c 	b.w	8003398 <_malloc_r>
 8003460:	b922      	cbnz	r2, 800346c <_realloc_r+0x20>
 8003462:	f7ff ff49 	bl	80032f8 <_free_r>
 8003466:	4625      	mov	r5, r4
 8003468:	4628      	mov	r0, r5
 800346a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800346c:	f000 f830 	bl	80034d0 <_malloc_usable_size_r>
 8003470:	42a0      	cmp	r0, r4
 8003472:	d20f      	bcs.n	8003494 <_realloc_r+0x48>
 8003474:	4621      	mov	r1, r4
 8003476:	4638      	mov	r0, r7
 8003478:	f7ff ff8e 	bl	8003398 <_malloc_r>
 800347c:	4605      	mov	r5, r0
 800347e:	2800      	cmp	r0, #0
 8003480:	d0f2      	beq.n	8003468 <_realloc_r+0x1c>
 8003482:	4631      	mov	r1, r6
 8003484:	4622      	mov	r2, r4
 8003486:	f7ff ff0f 	bl	80032a8 <memcpy>
 800348a:	4631      	mov	r1, r6
 800348c:	4638      	mov	r0, r7
 800348e:	f7ff ff33 	bl	80032f8 <_free_r>
 8003492:	e7e9      	b.n	8003468 <_realloc_r+0x1c>
 8003494:	4635      	mov	r5, r6
 8003496:	e7e7      	b.n	8003468 <_realloc_r+0x1c>

08003498 <_sbrk_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4d06      	ldr	r5, [pc, #24]	; (80034b4 <_sbrk_r+0x1c>)
 800349c:	2300      	movs	r3, #0
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	602b      	str	r3, [r5, #0]
 80034a4:	f7fd fb42 	bl	8000b2c <_sbrk>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d102      	bne.n	80034b2 <_sbrk_r+0x1a>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b103      	cbz	r3, 80034b2 <_sbrk_r+0x1a>
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	20000138 	.word	0x20000138

080034b8 <__malloc_lock>:
 80034b8:	4801      	ldr	r0, [pc, #4]	; (80034c0 <__malloc_lock+0x8>)
 80034ba:	f000 b811 	b.w	80034e0 <__retarget_lock_acquire_recursive>
 80034be:	bf00      	nop
 80034c0:	20000140 	.word	0x20000140

080034c4 <__malloc_unlock>:
 80034c4:	4801      	ldr	r0, [pc, #4]	; (80034cc <__malloc_unlock+0x8>)
 80034c6:	f000 b80c 	b.w	80034e2 <__retarget_lock_release_recursive>
 80034ca:	bf00      	nop
 80034cc:	20000140 	.word	0x20000140

080034d0 <_malloc_usable_size_r>:
 80034d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034d4:	1f18      	subs	r0, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bfbc      	itt	lt
 80034da:	580b      	ldrlt	r3, [r1, r0]
 80034dc:	18c0      	addlt	r0, r0, r3
 80034de:	4770      	bx	lr

080034e0 <__retarget_lock_acquire_recursive>:
 80034e0:	4770      	bx	lr

080034e2 <__retarget_lock_release_recursive>:
 80034e2:	4770      	bx	lr

080034e4 <_init>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr

080034f0 <_fini>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	bf00      	nop
 80034f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f6:	bc08      	pop	{r3}
 80034f8:	469e      	mov	lr, r3
 80034fa:	4770      	bx	lr
